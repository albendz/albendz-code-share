plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.5'
    id "jacoco"
}

version "0.1"
group "com.alicia"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "com.alicia.*"
    }
}

dependencies {
    kapt("io.micronaut.openapi:micronaut-openapi:2.1.1")
    kapt("io.micronaut.data:micronaut-data-processor:2.1.0")


    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("org.apache.commons:commons-csv:1.8")

    runtimeOnly("com.h2database:h2")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    // Tests
    implementation("org.mockito:mockito-core:3.6.0")
    implementation("junit:junit:4.13.1")
    
}

mainClassName = "com.alicia.Application"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/reports/jacoco")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    // TODO: when more tests are written for coverage
   /* violationRules {
        rule {
            element = 'CLASS'
            // White list
            limit {
                minimum = 0.70
            }
        }
    }*/
}

jacocoTestReport {
    dependsOn test
    description 'Generates Code coverage report. Fails build if it does not meet minimum coverage.'

    reports {
        xml.enabled = true    //XML required by coveralls and for the     below coverage checks
        html.enabled = true
        csv.enabled = false
    }
}

test.finalizedBy jacocoTestReport